{"version":3,"file":"youtube-music-player.es.js","sources":["../src/types/index.ts","../src/utils/youtube.ts","../src/utils/storage.ts","../src/player/YouTubeMusicPlayer.ts"],"sourcesContent":["// YouTube Player API Types\nexport interface YTPlayer {\n  playVideo(): void;\n  pauseVideo(): void;\n  stopVideo(): void;\n  seekTo(seconds: number, allowSeekAhead?: boolean): void;\n  getCurrentTime(): number;\n  getDuration(): number;\n  getPlayerState(): PlayerState;\n  getVolume(): number;\n  setVolume(volume: number): void;\n  mute(): void;\n  unMute(): void;\n  isMuted(): boolean;\n  loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;\n  cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;\n  getVideoUrl(): string;\n  getVideoEmbedCode(): string;\n  addEventListener(event: string, listener: string): void;\n  removeEventListener(event: string, listener: string): void;\n  destroy(): void;\n}\n\n// Player State Enum\nexport enum PlayerState {\n  UNSTARTED = -1,\n  ENDED = 0,\n  PLAYING = 1,\n  PAUSED = 2,\n  BUFFERING = 3,\n  CUED = 5,\n}\n\n// Repeat Mode Enum\nexport enum RepeatMode {\n  NONE = 'none',\n  ONE = 'one',\n  ALL = 'all',\n}\n\n// Track Interface\nexport interface Track {\n  id: string;\n  title: string;\n  duration: number;\n  thumbnail?: string;\n  url: string;\n  addedAt: Date;\n}\n\n// Playlist Interface\nexport interface Playlist {\n  tracks: Track[];\n  currentIndex: number;\n  shuffled: boolean;\n  shuffleOrder?: number[];\n}\n\n// Player Settings Interface\nexport interface PlayerSettings {\n  volume: number;\n  repeatMode: RepeatMode;\n  shuffled: boolean;\n  autoplay: boolean;\n}\n\n// Player State Interface\nexport interface PlayerStateData {\n  playlist: Playlist;\n  currentTime: number;\n  settings: PlayerSettings;\n  lastUpdated: Date;\n}\n\n// Event Types\nexport type PlayerEventType =\n  | 'ready'\n  | 'stateChange'\n  | 'trackChange'\n  | 'playlistChange'\n  | 'error'\n  | 'timeUpdate'\n  | 'volumeChange'\n  | 'settingsChange';\n\n// Event Handler Type\nexport type EventHandler<T = any> = (data: T) => void;\n\n// Player Configuration\nexport interface PlayerConfig {\n  containerId: string;\n  autoplay?: boolean;\n  volume?: number;\n  repeat?: RepeatMode;\n  shuffle?: boolean;\n  enableKeyboardShortcuts?: boolean;\n  saveState?: boolean;\n  storageKey?: string;\n}\n\n// YouTube Video Info\nexport interface VideoInfo {\n  id: string;\n  title: string;\n  duration: number;\n  thumbnail: string;\n  channelTitle?: string;\n}\n\n// Error Types\nexport enum ErrorType {\n  INVALID_VIDEO_ID = 'INVALID_VIDEO_ID',\n  VIDEO_NOT_FOUND = 'VIDEO_NOT_FOUND',\n  VIDEO_NOT_EMBEDDABLE = 'VIDEO_NOT_EMBEDDABLE',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  API_ERROR = 'API_ERROR',\n  STORAGE_ERROR = 'STORAGE_ERROR',\n}\n\n// Player Error Interface\nexport interface PlayerError {\n  type: ErrorType;\n  message: string;\n  videoId?: string;\n  originalError?: any;\n}\n\n// URL Validation Result\nexport interface URLValidationResult {\n  isValid: boolean;\n  videoId?: string;\n  error?: string;\n}\n\n// Storage Interface\nexport interface StorageManager {\n  save(key: string, data: any): void;\n  load<T>(key: string): T | null;\n  remove(key: string): void;\n  clear(): void;\n}\n\n// YouTube API Load State\nexport interface YouTubeAPIState {\n  loaded: boolean;\n  loading: boolean;\n  error?: string;\n}\n\n// Player Options for YouTube IFrame API\nexport interface YouTubePlayerOptions {\n  height: string | number;\n  width: string | number;\n  videoId?: string;\n  playerVars?: {\n    autoplay?: 0 | 1;\n    controls?: 0 | 1;\n    disablekb?: 0 | 1;\n    enablejsapi?: 0 | 1;\n    end?: number;\n    fs?: 0 | 1;\n    hl?: string;\n    iv_load_policy?: 1 | 3;\n    list?: string;\n    listType?: 'playlist' | 'user_uploads';\n    loop?: 0 | 1;\n    modestbranding?: 0 | 1;\n    origin?: string;\n    playlist?: string;\n    playsinline?: 0 | 1;\n    rel?: 0 | 1;\n    start?: number;\n    widget_referrer?: string;\n  };\n  events?: {\n    onReady?: (event: any) => void;\n    onStateChange?: (event: any) => void;\n    onPlaybackQualityChange?: (event: any) => void;\n    onPlaybackRateChange?: (event: any) => void;\n    onError?: (event: any) => void;\n    onApiChange?: (event: any) => void;\n  };\n}\n\n// Global YouTube API types\ndeclare global {\n  interface Window {\n    YT: {\n      Player: new (elementId: string, options: YouTubePlayerOptions) => YTPlayer;\n      PlayerState: typeof PlayerState;\n      ready: (callback: () => void) => void;\n    };\n    onYouTubeIframeAPIReady: () => void;\n  }\n} ","import { URLValidationResult, YouTubeAPIState, ErrorType, PlayerError } from '../types';\n\n/**\n * Extracts YouTube video ID from various URL formats\n */\nexport function extractVideoId(url: string): URLValidationResult {\n  const patterns = [\n    // Standard YouTube URLs\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([a-zA-Z0-9_-]{11})/,\n    // YouTube mobile URLs\n    /(?:m\\.youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]{11})/,\n    // YouTube shortened URLs with additional parameters\n    /(?:youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n    // Direct video ID (11 characters)\n    /^([a-zA-Z0-9_-]{11})$/,\n  ];\n\n  // Clean the URL\n  const cleanUrl = url.trim();\n\n  for (const pattern of patterns) {\n    const match = cleanUrl.match(pattern);\n    if (match && match[1]) {\n      return {\n        isValid: true,\n        videoId: match[1],\n      };\n    }\n  }\n\n  return {\n    isValid: false,\n    error: 'Invalid YouTube URL or Video ID',\n  };\n}\n\n/**\n * Validates if a string is a valid YouTube URL or video ID\n */\nexport function isValidYouTubeUrl(url: string): boolean {\n  return extractVideoId(url).isValid;\n}\n\n/**\n * Generates thumbnail URL for a YouTube video\n */\nexport function getThumbnailUrl(videoId: string, quality: 'default' | 'medium' | 'high' | 'standard' | 'maxres' = 'medium'): string {\n  const qualityMap = {\n    default: 'default',\n    medium: 'mqdefault',\n    high: 'hqdefault',\n    standard: 'sddefault',\n    maxres: 'maxresdefault',\n  };\n\n  return `https://img.youtube.com/vi/${videoId}/${qualityMap[quality]}.jpg`;\n}\n\n/**\n * YouTube API management\n */\nclass YouTubeAPIManager {\n  private state: YouTubeAPIState = {\n    loaded: false,\n    loading: false,\n  };\n\n  private loadPromise: Promise<void> | null = null;\n  private callbacks: (() => void)[] = [];\n\n  /**\n   * Load the YouTube IFrame API\n   */\n  async loadAPI(): Promise<void> {\n    if (this.state.loaded) {\n      return Promise.resolve();\n    }\n\n    if (this.state.loading && this.loadPromise) {\n      return this.loadPromise;\n    }\n\n    this.state.loading = true;\n    this.loadPromise = new Promise((resolve, reject) => {\n      // Check if API is already loaded\n      if (window.YT && window.YT.Player) {\n        this.state.loaded = true;\n        this.state.loading = false;\n        resolve();\n        return;\n      }\n\n      // Set up global callback\n      const originalCallback = window.onYouTubeIframeAPIReady;\n      window.onYouTubeIframeAPIReady = () => {\n        this.state.loaded = true;\n        this.state.loading = false;\n        \n        // Execute any pending callbacks\n        this.callbacks.forEach(callback => callback());\n        this.callbacks = [];\n\n        // Call original callback if it existed\n        if (originalCallback) {\n          originalCallback();\n        }\n\n        resolve();\n      };\n\n      // Create and append script tag\n      const script = document.createElement('script');\n      script.src = 'https://www.youtube.com/iframe_api';\n      script.onerror = () => {\n        this.state.loading = false;\n        this.state.error = 'Failed to load YouTube API';\n        reject(new Error('Failed to load YouTube API'));\n      };\n\n      const firstScript = document.getElementsByTagName('script')[0];\n      if (firstScript && firstScript.parentNode) {\n        firstScript.parentNode.insertBefore(script, firstScript);\n      } else {\n        document.head.appendChild(script);\n      }\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        if (this.state.loading) {\n          this.state.loading = false;\n          this.state.error = 'YouTube API load timeout';\n          reject(new Error('YouTube API load timeout'));\n        }\n      }, 10000);\n    });\n\n    return this.loadPromise;\n  }\n\n  /**\n   * Check if API is ready\n   */\n  isReady(): boolean {\n    return this.state.loaded && !!(window.YT && window.YT.Player);\n  }\n\n  /**\n   * Wait for API to be ready\n   */\n  async waitForReady(): Promise<void> {\n    if (this.isReady()) {\n      return Promise.resolve();\n    }\n\n    if (!this.state.loading && !this.state.loaded) {\n      await this.loadAPI();\n    }\n\n    return new Promise((resolve) => {\n      if (this.isReady()) {\n        resolve();\n        return;\n      }\n\n      this.callbacks.push(resolve);\n    });\n  }\n\n  /**\n   * Get current API state\n   */\n  getState(): YouTubeAPIState {\n    return { ...this.state };\n  }\n}\n\n// Singleton instance\nexport const youtubeAPI = new YouTubeAPIManager();\n\n/**\n * Format time in seconds to MM:SS or HH:MM:SS format\n */\nexport function formatTime(seconds: number): string {\n  if (isNaN(seconds) || seconds < 0) {\n    return '0:00';\n  }\n\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }\n\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n\n/**\n * Parse time string (MM:SS or HH:MM:SS) to seconds\n */\nexport function parseTime(timeString: string): number {\n  const parts = timeString.split(':').map(part => parseInt(part, 10)).filter(num => !isNaN(num));\n  \n  if (parts.length === 2) {\n    // MM:SS\n    return (parts[0] || 0) * 60 + (parts[1] || 0);\n  } else if (parts.length === 3) {\n    // HH:MM:SS\n    return (parts[0] || 0) * 3600 + (parts[1] || 0) * 60 + (parts[2] || 0);\n  }\n  \n  return 0;\n}\n\n/**\n * Create a PlayerError from YouTube API error codes\n */\nexport function createPlayerError(errorCode: number, videoId?: string): PlayerError {\n  const errorMap: Record<number, { type: ErrorType; message: string }> = {\n    2: {\n      type: ErrorType.INVALID_VIDEO_ID,\n      message: 'The video ID is invalid or contains invalid characters.',\n    },\n    5: {\n      type: ErrorType.API_ERROR,\n      message: 'The requested content cannot be played in an HTML5 player.',\n    },\n    100: {\n      type: ErrorType.VIDEO_NOT_FOUND,\n      message: 'The video was not found or has been removed.',\n    },\n    101: {\n      type: ErrorType.VIDEO_NOT_EMBEDDABLE,\n      message: 'The video owner does not allow it to be played in embedded players.',\n    },\n    150: {\n      type: ErrorType.VIDEO_NOT_EMBEDDABLE,\n      message: 'The video owner does not allow it to be played in embedded players.',\n    },\n  };\n\n  const errorInfo = errorMap[errorCode] || {\n    type: ErrorType.API_ERROR,\n    message: `Unknown YouTube API error: ${errorCode}`,\n  };\n\n  return {\n    type: errorInfo.type,\n    message: errorInfo.message,\n    ...(videoId && { videoId }),\n    originalError: errorCode,\n  };\n}\n\n/**\n * Generate a random shuffle order for playlist\n */\nexport function generateShuffleOrder(length: number, currentIndex?: number): number[] {\n  const order = Array.from({ length }, (_, i) => i);\n  \n  // Fisher-Yates shuffle\n  for (let i = order.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [order[i], order[j]] = [order[j], order[i]];\n  }\n\n  // If current index is provided, ensure it's first in the shuffle order\n  if (currentIndex !== undefined && currentIndex >= 0 && currentIndex < length) {\n    const currentPos = order.indexOf(currentIndex);\n    if (currentPos > 0) {\n      [order[0], order[currentPos]] = [order[currentPos], order[0]];\n    }\n  }\n\n  return order;\n}\n\n/**\n * Debounce function for limiting API calls\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = window.setTimeout(() => func(...args), wait);\n  };\n} ","import { StorageManager, PlayerStateData, ErrorType, PlayerError } from '../types';\n\n/**\n * LocalStorage implementation of StorageManager\n */\nexport class LocalStorageManager implements StorageManager {\n  private readonly prefix: string;\n\n  constructor(prefix = 'ytMusicPlayer') {\n    this.prefix = prefix;\n  }\n\n  /**\n   * Save data to localStorage\n   */\n  save(key: string, data: any): void {\n    try {\n      const serialized = JSON.stringify(data);\n      const fullKey = this.getFullKey(key);\n      localStorage.setItem(fullKey, serialized);\n    } catch (error) {\n      console.warn('Failed to save to localStorage:', error);\n      throw new Error(`Storage save failed: ${error}`);\n    }\n  }\n\n  /**\n   * Load data from localStorage\n   */\n  load<T>(key: string): T | null {\n    try {\n      const fullKey = this.getFullKey(key);\n      const item = localStorage.getItem(fullKey);\n      \n      if (item === null) {\n        return null;\n      }\n\n      return JSON.parse(item) as T;\n    } catch (error) {\n      console.warn('Failed to load from localStorage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove item from localStorage\n   */\n  remove(key: string): void {\n    try {\n      const fullKey = this.getFullKey(key);\n      localStorage.removeItem(fullKey);\n    } catch (error) {\n      console.warn('Failed to remove from localStorage:', error);\n    }\n  }\n\n  /**\n   * Clear all items with the current prefix\n   */\n  clear(): void {\n    try {\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith(this.prefix + ':')) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear localStorage:', error);\n    }\n  }\n\n  /**\n   * Check if localStorage is available\n   */\n  isAvailable(): boolean {\n    try {\n      const testKey = '__localStorage_test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get storage usage information\n   */\n  getUsageInfo(): { used: number; available: number; percentage: number } {\n    if (!this.isAvailable()) {\n      return { used: 0, available: 0, percentage: 0 };\n    }\n\n    try {\n      // Estimate storage usage\n      let used = 0;\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          const value = localStorage.getItem(key);\n          used += key.length + (value?.length || 0);\n        }\n      }\n\n      // Most browsers have ~5-10MB localStorage limit\n      const estimated = 5 * 1024 * 1024; // 5MB\n      const percentage = (used / estimated) * 100;\n\n      return {\n        used,\n        available: estimated - used,\n        percentage: Math.min(percentage, 100),\n      };\n    } catch {\n      return { used: 0, available: 0, percentage: 0 };\n    }\n  }\n\n  /**\n   * Get full key with prefix\n   */\n  private getFullKey(key: string): string {\n    return `${this.prefix}:${key}`;\n  }\n}\n\n/**\n * Player-specific storage manager\n */\nexport class PlayerStorageManager {\n  private storage: StorageManager;\n  private readonly stateKey = 'playerState';\n\n  constructor(storage?: StorageManager, prefix = 'ytMusicPlayer') {\n    this.storage = storage || new LocalStorageManager(prefix);\n  }\n\n  /**\n   * Save complete player state\n   */\n  saveState(state: PlayerStateData): void {\n    try {\n      // Create a serializable version of the state\n      const serializableState = {\n        ...state,\n        lastUpdated: state.lastUpdated.toISOString(),\n        playlist: {\n          ...state.playlist,\n          tracks: state.playlist.tracks.map(track => ({\n            ...track,\n            addedAt: track.addedAt.toISOString(),\n          })),\n        },\n      };\n\n      this.storage.save(this.stateKey, serializableState);\n    } catch (error) {\n      console.warn('Failed to save player state:', error);\n    }\n  }\n\n  /**\n   * Load complete player state\n   */\n  loadState(): PlayerStateData | null {\n    try {\n      const state = this.storage.load<any>(this.stateKey);\n      if (!state) {\n        return null;\n      }\n\n      // Convert string dates back to Date objects\n      return {\n        ...state,\n        lastUpdated: new Date(state.lastUpdated),\n        playlist: {\n          ...state.playlist,\n          tracks: state.playlist.tracks.map((track: any) => ({\n            ...track,\n            addedAt: new Date(track.addedAt),\n          })),\n        },\n      };\n    } catch (error) {\n      console.warn('Failed to load player state:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Save only playlist data\n   */\n  savePlaylist(playlist: PlayerStateData['playlist']): void {\n    try {\n      const state = this.loadState();\n      if (state) {\n        state.playlist = playlist;\n        state.lastUpdated = new Date();\n        this.saveState(state);\n      }\n    } catch (error) {\n      console.warn('Failed to save playlist:', error);\n    }\n  }\n\n  /**\n   * Save only current playback position\n   */\n  saveCurrentTime(currentTime: number): void {\n    try {\n      const state = this.loadState();\n      if (state) {\n        state.currentTime = currentTime;\n        state.lastUpdated = new Date();\n        this.saveState(state);\n      }\n    } catch (error) {\n      console.warn('Failed to save current time:', error);\n    }\n  }\n\n  /**\n   * Save only player settings\n   */\n  saveSettings(settings: PlayerStateData['settings']): void {\n    try {\n      const state = this.loadState();\n      if (state) {\n        state.settings = settings;\n        state.lastUpdated = new Date();\n        this.saveState(state);\n      }\n    } catch (error) {\n      console.warn('Failed to save settings:', error);\n    }\n  }\n\n  /**\n   * Clear all stored data\n   */\n  clearState(): void {\n    try {\n      this.storage.remove(this.stateKey);\n    } catch (error) {\n      console.warn('Failed to clear player state:', error);\n    }\n  }\n\n  /**\n   * Check if storage is available\n   */\n  isStorageAvailable(): boolean {\n    if (this.storage instanceof LocalStorageManager) {\n      return this.storage.isAvailable();\n    }\n    return true; // Assume other storage implementations are available\n  }\n\n  /**\n   * Migrate data from old format to new format\n   */\n  migrateData(oldKey = 'ytMusicPlayer'): boolean {\n    try {\n      const oldData = localStorage.getItem(oldKey);\n      if (!oldData) {\n        return false;\n      }\n\n      const parsed = JSON.parse(oldData);\n      \n      // Convert old format to new format if needed\n      if (parsed && typeof parsed === 'object') {\n        // This is where you'd handle migration logic\n        // For now, we'll assume the format is compatible\n        this.storage.save(this.stateKey, parsed);\n        localStorage.removeItem(oldKey);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.warn('Failed to migrate data:', error);\n      return false;\n    }\n  }\n}\n\n// Default export\nexport const defaultStorage = new PlayerStorageManager(); ","import {\n  YTPlayer,\n  PlayerState,\n  RepeatMode,\n  Track,\n  Playlist,\n  PlayerSettings,\n  PlayerStateData,\n  PlayerEventType,\n  EventHandler,\n  PlayerConfig,\n  VideoInfo,\n  PlayerError,\n  ErrorType,\n  YouTubePlayerOptions,\n} from '../types';\nimport { \n  extractVideoId, \n  youtubeAPI, \n  getThumbnailUrl, \n  formatTime,\n  createPlayerError,\n  generateShuffleOrder,\n  debounce\n} from '../utils/youtube';\nimport { PlayerStorageManager, defaultStorage } from '../utils/storage';\n\n/**\n * Main YouTube Music Player class\n */\nexport class YouTubeMusicPlayer {\n  private player: YTPlayer | null = null;\n  private playlist: Playlist = {\n    tracks: [],\n    currentIndex: 0,\n    shuffled: false,\n  };\n  private settings: PlayerSettings = {\n    volume: 80,\n    repeatMode: RepeatMode.ALL,\n    shuffled: false,\n    autoplay: false,\n  };\n  private currentTime = 0;\n  private isReady = false;\n  private containerId: string;\n  private storage: PlayerStorageManager;\n  private eventListeners: Map<PlayerEventType, EventHandler[]> = new Map();\n  \n  // Debounced functions\n  private debouncedSaveState: () => void;\n  private debouncedTimeUpdate: () => void;\n\n  constructor(config: PlayerConfig) {\n    this.containerId = config.containerId;\n    this.storage = config.saveState !== false ? defaultStorage : new PlayerStorageManager();\n    \n    // Apply config\n    if (config.volume !== undefined) this.settings.volume = config.volume;\n    if (config.repeat !== undefined) this.settings.repeatMode = config.repeat;\n    if (config.shuffle !== undefined) this.settings.shuffled = config.shuffle;\n    if (config.autoplay !== undefined) this.settings.autoplay = config.autoplay;\n\n    // Setup debounced functions\n    this.debouncedSaveState = debounce(() => this.saveCurrentState(), 1000);\n    this.debouncedTimeUpdate = debounce(() => this.debouncedSaveState(), 2000);\n\n    // Initialize\n    this.initialize();\n  }\n\n  /**\n   * Initialize the player\n   */\n  private async initialize(): Promise<void> {\n    try {\n      // Load stored state\n      this.loadStoredState();\n\n      // Wait for YouTube API\n      await youtubeAPI.waitForReady();\n\n      // Create player container if it doesn't exist\n      this.ensureContainer();\n\n      // Create YouTube player\n      this.createPlayer();\n\n      this.emit('ready', { player: this });\n    } catch (error) {\n      this.handleError({\n        type: ErrorType.API_ERROR,\n        message: 'Failed to initialize player',\n        originalError: error,\n      });\n    }\n  }\n\n  /**\n   * Ensure player container exists\n   */\n  private ensureContainer(): void {\n    let container = document.getElementById(this.containerId);\n    if (!container) {\n      container = document.createElement('div');\n      container.id = this.containerId;\n      container.style.cssText = 'width: 0; height: 0; overflow: hidden; position: absolute;';\n      document.body.appendChild(container);\n    }\n  }\n\n  /**\n   * Create YouTube player instance\n   */\n  private createPlayer(): void {\n    const playerOptions: YouTubePlayerOptions = {\n      height: 0,\n      width: 0,\n      playerVars: {\n        autoplay: 0,\n        controls: 0,\n        disablekb: 1,\n        enablejsapi: 1,\n        iv_load_policy: 3,\n        modestbranding: 1,\n        playsinline: 1,\n        rel: 0,\n        origin: window.location.origin, // Fix for localhost CORS issues\n      },\n      events: {\n        onReady: (event) => this.handlePlayerReady(event),\n        onStateChange: (event) => this.handlePlayerStateChange(event),\n        onError: (event) => this.handlePlayerError(event),\n      },\n    };\n\n    this.player = new window.YT.Player(this.containerId, playerOptions);\n  }\n\n  /**\n   * Handle player ready event\n   */\n  private handlePlayerReady(event: any): void {\n    this.isReady = true;\n    this.player?.setVolume(this.settings.volume);\n\n    // Start monitoring time updates\n    this.startTimeMonitoring();\n\n    // Load current track if available\n    if (this.playlist.tracks.length > 0) {\n      this.loadCurrentTrack();\n    }\n\n    this.emit('ready', { player: this });\n  }\n\n  /**\n   * Handle player state changes\n   */\n  private handlePlayerStateChange(event: any): void {\n    const state = event.data;\n    \n    this.emit('stateChange', { \n      state, \n      isPlaying: state === PlayerState.PLAYING,\n      isPaused: state === PlayerState.PAUSED,\n      isEnded: state === PlayerState.ENDED,\n    });\n\n    // Handle track end\n    if (state === PlayerState.ENDED) {\n      this.handleTrackEnded();\n    }\n\n    // Save state when playing starts\n    if (state === PlayerState.PLAYING) {\n      this.debouncedSaveState();\n    }\n  }\n\n  /**\n   * Handle YouTube API errors\n   */\n  private handlePlayerError(event: any): void {\n    const errorCode = event.data;\n    const currentTrack = this.getCurrentTrack();\n    const error = createPlayerError(errorCode, currentTrack?.id);\n    \n    this.handleError(error);\n\n    // Try to skip to next track on certain errors\n    if ([100, 101, 150].includes(errorCode) && this.playlist.tracks.length > 1) {\n      this.next();\n    }\n  }\n\n  /**\n   * Handle track ended\n   */\n  private handleTrackEnded(): void {\n    if (this.settings.repeatMode === RepeatMode.ONE) {\n      // Repeat current track\n      this.seekTo(0);\n      this.play();\n    } else {\n      // Move to next track\n      this.next();\n    }\n  }\n\n  /**\n   * Start time monitoring\n   */\n  private startTimeMonitoring(): void {\n    const updateTime = () => {\n      if (this.player && this.isReady) {\n        this.currentTime = this.player.getCurrentTime();\n        this.handleTimeUpdate();\n      }\n      requestAnimationFrame(updateTime);\n    };\n    updateTime();\n  }\n\n  /**\n   * Handle time updates\n   */\n  private handleTimeUpdate(): void {\n    this.emit('timeUpdate', {\n      currentTime: this.currentTime,\n      duration: this.getDuration(),\n      progress: this.getProgress(),\n    });\n    \n    // Save position occasionally (debounced)\n    this.debouncedTimeUpdate();\n  }\n\n  /**\n   * Add a track to the playlist\n   */\n  async addTrack(url: string, title?: string): Promise<Track | null> {\n    const validation = extractVideoId(url);\n    if (!validation.isValid || !validation.videoId) {\n      this.handleError({\n        type: ErrorType.INVALID_VIDEO_ID,\n        message: 'Invalid YouTube URL',\n      });\n      return null;\n    }\n\n    const track: Track = {\n      id: validation.videoId,\n      title: title || `Video ${validation.videoId}`,\n      duration: 0, // Will be updated when video loads\n      thumbnail: getThumbnailUrl(validation.videoId),\n      url,\n      addedAt: new Date(),\n    };\n\n    this.playlist.tracks.push(track);\n    \n    // If this is the first track, load it\n    if (this.playlist.tracks.length === 1) {\n      this.playlist.currentIndex = 0;\n      this.loadCurrentTrack();\n    }\n\n    this.emit('playlistChange', { \n      playlist: this.playlist,\n      action: 'add',\n      track,\n    });\n\n    this.debouncedSaveState();\n    return track;\n  }\n\n  /**\n   * Remove track from playlist\n   */\n  removeTrack(index: number): boolean {\n    if (index < 0 || index >= this.playlist.tracks.length) {\n      return false;\n    }\n\n    const removedTrack = this.playlist.tracks[index];\n    this.playlist.tracks.splice(index, 1);\n\n    // Adjust current index\n    if (index < this.playlist.currentIndex) {\n      this.playlist.currentIndex--;\n    } else if (index === this.playlist.currentIndex) {\n      // Current track was removed\n      if (this.playlist.tracks.length === 0) {\n        this.playlist.currentIndex = 0;\n        this.stop();\n      } else {\n        // Load next track (or previous if at end)\n        if (this.playlist.currentIndex >= this.playlist.tracks.length) {\n          this.playlist.currentIndex = 0;\n        }\n        this.loadCurrentTrack();\n      }\n    }\n\n    this.emit('playlistChange', { \n      playlist: this.playlist,\n      action: 'remove',\n      track: removedTrack,\n      index,\n    });\n\n    this.debouncedSaveState();\n    return true;\n  }\n\n  /**\n   * Load current track into player\n   */\n  private loadCurrentTrack(): void {\n    const track = this.getCurrentTrack();\n    if (!track || !this.player || !this.isReady) {\n      return;\n    }\n\n    this.player.loadVideoById(track.id, this.currentTime);\n    \n    this.emit('trackChange', {\n      track,\n      index: this.playlist.currentIndex,\n      playlist: this.playlist,\n    });\n  }\n\n  /**\n   * Play current track\n   */\n  play(): void {\n    if (this.player && this.isReady) {\n      this.player.playVideo();\n    }\n  }\n\n  /**\n   * Pause current track\n   */\n  pause(): void {\n    if (this.player && this.isReady) {\n      this.player.pauseVideo();\n    }\n  }\n\n  /**\n   * Stop playback\n   */\n  stop(): void {\n    if (this.player && this.isReady) {\n      this.player.stopVideo();\n      this.currentTime = 0;\n    }\n  }\n\n  /**\n   * Toggle play/pause\n   */\n  togglePlay(): void {\n    if (!this.player || !this.isReady) return;\n\n    const state = this.player.getPlayerState();\n    if (state === PlayerState.PLAYING) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  /**\n   * Go to next track\n   */\n  next(): void {\n    if (this.playlist.tracks.length === 0) return;\n\n    let nextIndex: number;\n\n    if (this.settings.shuffled && this.playlist.shuffleOrder) {\n      // Find current position in shuffle order\n      const currentShufflePos = this.playlist.shuffleOrder.indexOf(this.playlist.currentIndex);\n      const nextShufflePos = (currentShufflePos + 1) % this.playlist.shuffleOrder.length;\n      nextIndex = this.playlist.shuffleOrder[nextShufflePos];\n    } else {\n      nextIndex = (this.playlist.currentIndex + 1) % this.playlist.tracks.length;\n    }\n\n    this.jumpToTrack(nextIndex);\n  }\n\n  /**\n   * Go to previous track\n   */\n  previous(): void {\n    if (this.playlist.tracks.length === 0) return;\n\n    let prevIndex: number;\n\n    if (this.settings.shuffled && this.playlist.shuffleOrder) {\n      // Find current position in shuffle order\n      const currentShufflePos = this.playlist.shuffleOrder.indexOf(this.playlist.currentIndex);\n      const prevShufflePos = currentShufflePos === 0 \n        ? this.playlist.shuffleOrder.length - 1 \n        : currentShufflePos - 1;\n      prevIndex = this.playlist.shuffleOrder[prevShufflePos];\n    } else {\n      prevIndex = this.playlist.currentIndex === 0 \n        ? this.playlist.tracks.length - 1 \n        : this.playlist.currentIndex - 1;\n    }\n\n    this.jumpToTrack(prevIndex);\n  }\n\n  /**\n   * Jump to specific track\n   */\n  jumpToTrack(index: number): void {\n    if (index < 0 || index >= this.playlist.tracks.length) return;\n\n    this.playlist.currentIndex = index;\n    this.currentTime = 0;\n    this.loadCurrentTrack();\n    \n    if (this.settings.autoplay) {\n      this.play();\n    }\n  }\n\n  /**\n   * Seek to position in current track\n   */\n  seekTo(seconds: number): void {\n    if (this.player && this.isReady) {\n      this.player.seekTo(seconds);\n      this.currentTime = seconds;\n    }\n  }\n\n  /**\n   * Set volume (0-100)\n   */\n  setVolume(volume: number): void {\n    volume = Math.max(0, Math.min(100, volume));\n    this.settings.volume = volume;\n    \n    if (this.player && this.isReady) {\n      this.player.setVolume(volume);\n    }\n\n    this.emit('volumeChange', { volume });\n    this.debouncedSaveState();\n  }\n\n  /**\n   * Mute/unmute\n   */\n  toggleMute(): void {\n    if (!this.player || !this.isReady) return;\n\n    if (this.player.isMuted()) {\n      this.player.unMute();\n    } else {\n      this.player.mute();\n    }\n  }\n\n  /**\n   * Toggle shuffle mode\n   */\n  toggleShuffle(): void {\n    this.settings.shuffled = !this.settings.shuffled;\n    \n    if (this.settings.shuffled) {\n      this.playlist.shuffleOrder = generateShuffleOrder(\n        this.playlist.tracks.length,\n        this.playlist.currentIndex\n      );\n    } else {\n      this.playlist.shuffleOrder = undefined;\n    }\n\n    this.emit('settingsChange', { settings: this.settings });\n    this.debouncedSaveState();\n  }\n\n  /**\n   * Cycle through repeat modes\n   */\n  toggleRepeat(): void {\n    const modes = [RepeatMode.NONE, RepeatMode.ALL, RepeatMode.ONE];\n    const currentIndex = modes.indexOf(this.settings.repeatMode);\n    const nextIndex = (currentIndex + 1) % modes.length;\n    \n    this.settings.repeatMode = modes[nextIndex];\n    \n    this.emit('settingsChange', { settings: this.settings });\n    this.debouncedSaveState();\n  }\n\n  /**\n   * Clear playlist\n   */\n  clearPlaylist(): void {\n    this.playlist.tracks = [];\n    this.playlist.currentIndex = 0;\n    this.playlist.shuffleOrder = undefined;\n    this.stop();\n\n    this.emit('playlistChange', { \n      playlist: this.playlist,\n      action: 'clear',\n    });\n\n    this.debouncedSaveState();\n  }\n\n  // Getters\n  getCurrentTrack(): Track | null {\n    return this.playlist.tracks[this.playlist.currentIndex] || null;\n  }\n\n  getPlaylist(): Playlist {\n    return { ...this.playlist };\n  }\n\n  getSettings(): PlayerSettings {\n    return { ...this.settings };\n  }\n\n  getCurrentTime(): number {\n    return this.currentTime;\n  }\n\n  getDuration(): number {\n    return this.player?.getDuration() || 0;\n  }\n\n  getProgress(): number {\n    const duration = this.getDuration();\n    return duration > 0 ? (this.currentTime / duration) * 100 : 0;\n  }\n\n  getVolume(): number {\n    return this.settings.volume;\n  }\n\n  isPlaying(): boolean {\n    return this.player?.getPlayerState() === PlayerState.PLAYING;\n  }\n\n  isPaused(): boolean {\n    return this.player?.getPlayerState() === PlayerState.PAUSED;\n  }\n\n  isMuted(): boolean {\n    return this.player?.isMuted() || false;\n  }\n\n  // Event handling\n  on(event: PlayerEventType, handler: EventHandler): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)?.push(handler);\n  }\n\n  off(event: PlayerEventType, handler: EventHandler): void {\n    const handlers = this.eventListeners.get(event);\n    if (handlers) {\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: PlayerEventType, data: any): void {\n    const handlers = this.eventListeners.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.warn('Event handler error:', error);\n        }\n      });\n    }\n  }\n\n  private handleError(error: PlayerError): void {\n    console.error('Player error:', error);\n    this.emit('error', error);\n  }\n\n  // State persistence\n  private saveCurrentState(): void {\n    if (!this.storage) return;\n\n    const state: PlayerStateData = {\n      playlist: this.playlist,\n      currentTime: this.currentTime,\n      settings: this.settings,\n      lastUpdated: new Date(),\n    };\n\n    this.storage.saveState(state);\n  }\n\n  private loadStoredState(): void {\n    if (!this.storage) return;\n\n    const state = this.storage.loadState();\n    if (state) {\n      this.playlist = state.playlist;\n      this.currentTime = state.currentTime;\n      this.settings = state.settings;\n    }\n  }\n\n  /**\n   * Destroy player and clean up\n   */\n  destroy(): void {\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n    \n    this.eventListeners.clear();\n    this.isReady = false;\n  }\n} "],"names":["PlayerState","RepeatMode","ErrorType"],"mappings":"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"}