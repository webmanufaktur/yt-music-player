{"version":3,"file":"youtube-music-player.iife.js","sources":["../src/types/index.ts","../src/utils/youtube.ts","../src/utils/storage.ts","../src/player/YouTubeMusicPlayer.ts"],"sourcesContent":["// YouTube Player API Types\nexport interface YTPlayer {\n  playVideo(): void;\n  pauseVideo(): void;\n  stopVideo(): void;\n  seekTo(seconds: number, allowSeekAhead?: boolean): void;\n  getCurrentTime(): number;\n  getDuration(): number;\n  getPlayerState(): PlayerState;\n  getVolume(): number;\n  setVolume(volume: number): void;\n  mute(): void;\n  unMute(): void;\n  isMuted(): boolean;\n  loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;\n  cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: string): void;\n  getVideoUrl(): string;\n  getVideoEmbedCode(): string;\n  addEventListener(event: string, listener: string): void;\n  removeEventListener(event: string, listener: string): void;\n  destroy(): void;\n}\n\n// Player State Enum\nexport enum PlayerState {\n  UNSTARTED = -1,\n  ENDED = 0,\n  PLAYING = 1,\n  PAUSED = 2,\n  BUFFERING = 3,\n  CUED = 5,\n}\n\n// Repeat Mode Enum\nexport enum RepeatMode {\n  NONE = 'none',\n  ONE = 'one',\n  ALL = 'all',\n}\n\n// Track Interface\nexport interface Track {\n  id: string;\n  title: string;\n  duration: number;\n  thumbnail?: string;\n  url: string;\n  addedAt: Date;\n}\n\n// Playlist Interface\nexport interface Playlist {\n  tracks: Track[];\n  currentIndex: number;\n  shuffled: boolean;\n  shuffleOrder?: number[];\n}\n\n// Player Settings Interface\nexport interface PlayerSettings {\n  volume: number;\n  repeatMode: RepeatMode;\n  shuffled: boolean;\n  autoplay: boolean;\n}\n\n// Player State Interface\nexport interface PlayerStateData {\n  playlist: Playlist;\n  currentTime: number;\n  settings: PlayerSettings;\n  lastUpdated: Date;\n}\n\n// Event Types\nexport type PlayerEventType =\n  | 'ready'\n  | 'stateChange'\n  | 'trackChange'\n  | 'playlistChange'\n  | 'error'\n  | 'timeUpdate'\n  | 'volumeChange'\n  | 'settingsChange';\n\n// Event Handler Type\nexport type EventHandler<T = any> = (data: T) => void;\n\n// Player Configuration\nexport interface PlayerConfig {\n  containerId: string;\n  autoplay?: boolean;\n  volume?: number;\n  repeat?: RepeatMode;\n  shuffle?: boolean;\n  enableKeyboardShortcuts?: boolean;\n  saveState?: boolean;\n  storageKey?: string;\n}\n\n// YouTube Video Info\nexport interface VideoInfo {\n  id: string;\n  title: string;\n  duration: number;\n  thumbnail: string;\n  channelTitle?: string;\n}\n\n// Error Types\nexport enum ErrorType {\n  INVALID_VIDEO_ID = 'INVALID_VIDEO_ID',\n  VIDEO_NOT_FOUND = 'VIDEO_NOT_FOUND',\n  VIDEO_NOT_EMBEDDABLE = 'VIDEO_NOT_EMBEDDABLE',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  API_ERROR = 'API_ERROR',\n  STORAGE_ERROR = 'STORAGE_ERROR',\n}\n\n// Player Error Interface\nexport interface PlayerError {\n  type: ErrorType;\n  message: string;\n  videoId?: string;\n  originalError?: any;\n}\n\n// URL Validation Result\nexport interface URLValidationResult {\n  isValid: boolean;\n  videoId?: string;\n  error?: string;\n}\n\n// Storage Interface\nexport interface StorageManager {\n  save(key: string, data: any): void;\n  load<T>(key: string): T | null;\n  remove(key: string): void;\n  clear(): void;\n}\n\n// YouTube API Load State\nexport interface YouTubeAPIState {\n  loaded: boolean;\n  loading: boolean;\n  error?: string;\n}\n\n// Player Options for YouTube IFrame API\nexport interface YouTubePlayerOptions {\n  height: string | number;\n  width: string | number;\n  videoId?: string;\n  playerVars?: {\n    autoplay?: 0 | 1;\n    controls?: 0 | 1;\n    disablekb?: 0 | 1;\n    enablejsapi?: 0 | 1;\n    end?: number;\n    fs?: 0 | 1;\n    hl?: string;\n    iv_load_policy?: 1 | 3;\n    list?: string;\n    listType?: 'playlist' | 'user_uploads';\n    loop?: 0 | 1;\n    modestbranding?: 0 | 1;\n    origin?: string;\n    playlist?: string;\n    playsinline?: 0 | 1;\n    rel?: 0 | 1;\n    start?: number;\n    widget_referrer?: string;\n  };\n  events?: {\n    onReady?: (event: any) => void;\n    onStateChange?: (event: any) => void;\n    onPlaybackQualityChange?: (event: any) => void;\n    onPlaybackRateChange?: (event: any) => void;\n    onError?: (event: any) => void;\n    onApiChange?: (event: any) => void;\n  };\n}\n\n// Global YouTube API types\ndeclare global {\n  interface Window {\n    YT: {\n      Player: new (elementId: string, options: YouTubePlayerOptions) => YTPlayer;\n      PlayerState: typeof PlayerState;\n      ready: (callback: () => void) => void;\n    };\n    onYouTubeIframeAPIReady: () => void;\n  }\n} ","import { URLValidationResult, YouTubeAPIState, ErrorType, PlayerError } from '../types';\n\n/**\n * Extracts YouTube video ID from various URL formats\n */\nexport function extractVideoId(url: string): URLValidationResult {\n  const patterns = [\n    // Standard YouTube URLs\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([a-zA-Z0-9_-]{11})/,\n    // YouTube mobile URLs\n    /(?:m\\.youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]{11})/,\n    // YouTube shortened URLs with additional parameters\n    /(?:youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n    // Direct video ID (11 characters)\n    /^([a-zA-Z0-9_-]{11})$/,\n  ];\n\n  // Clean the URL\n  const cleanUrl = url.trim();\n\n  for (const pattern of patterns) {\n    const match = cleanUrl.match(pattern);\n    if (match && match[1]) {\n      return {\n        isValid: true,\n        videoId: match[1],\n      };\n    }\n  }\n\n  return {\n    isValid: false,\n    error: 'Invalid YouTube URL or Video ID',\n  };\n}\n\n/**\n * Validates if a string is a valid YouTube URL or video ID\n */\nexport function isValidYouTubeUrl(url: string): boolean {\n  return extractVideoId(url).isValid;\n}\n\n/**\n * Generates thumbnail URL for a YouTube video\n */\nexport function getThumbnailUrl(videoId: string, quality: 'default' | 'medium' | 'high' | 'standard' | 'maxres' = 'medium'): string {\n  const qualityMap = {\n    default: 'default',\n    medium: 'mqdefault',\n    high: 'hqdefault',\n    standard: 'sddefault',\n    maxres: 'maxresdefault',\n  };\n\n  return `https://img.youtube.com/vi/${videoId}/${qualityMap[quality]}.jpg`;\n}\n\n/**\n * YouTube API management\n */\nclass YouTubeAPIManager {\n  private state: YouTubeAPIState = {\n    loaded: false,\n    loading: false,\n  };\n\n  private loadPromise: Promise<void> | null = null;\n  private callbacks: (() => void)[] = [];\n\n  /**\n   * Load the YouTube IFrame API\n   */\n  async loadAPI(): Promise<void> {\n    if (this.state.loaded) {\n      return Promise.resolve();\n    }\n\n    if (this.state.loading && this.loadPromise) {\n      return this.loadPromise;\n    }\n\n    this.state.loading = true;\n    this.loadPromise = new Promise((resolve, reject) => {\n      // Check if API is already loaded\n      if (window.YT && window.YT.Player) {\n        this.state.loaded = true;\n        this.state.loading = false;\n        resolve();\n        return;\n      }\n\n      // Set up global callback\n      const originalCallback = window.onYouTubeIframeAPIReady;\n      window.onYouTubeIframeAPIReady = () => {\n        this.state.loaded = true;\n        this.state.loading = false;\n        \n        // Execute any pending callbacks\n        this.callbacks.forEach(callback => callback());\n        this.callbacks = [];\n\n        // Call original callback if it existed\n        if (originalCallback) {\n          originalCallback();\n        }\n\n        resolve();\n      };\n\n      // Create and append script tag\n      const script = document.createElement('script');\n      script.src = 'https://www.youtube.com/iframe_api';\n      script.onerror = () => {\n        this.state.loading = false;\n        this.state.error = 'Failed to load YouTube API';\n        reject(new Error('Failed to load YouTube API'));\n      };\n\n      const firstScript = document.getElementsByTagName('script')[0];\n      if (firstScript && firstScript.parentNode) {\n        firstScript.parentNode.insertBefore(script, firstScript);\n      } else {\n        document.head.appendChild(script);\n      }\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        if (this.state.loading) {\n          this.state.loading = false;\n          this.state.error = 'YouTube API load timeout';\n          reject(new Error('YouTube API load timeout'));\n        }\n      }, 10000);\n    });\n\n    return this.loadPromise;\n  }\n\n  /**\n   * Check if API is ready\n   */\n  isReady(): boolean {\n    return this.state.loaded && !!(window.YT && window.YT.Player);\n  }\n\n  /**\n   * Wait for API to be ready\n   */\n  async waitForReady(): Promise<void> {\n    if (this.isReady()) {\n      return Promise.resolve();\n    }\n\n    if (!this.state.loading && !this.state.loaded) {\n      await this.loadAPI();\n    }\n\n    return new Promise((resolve) => {\n      if (this.isReady()) {\n        resolve();\n        return;\n      }\n\n      this.callbacks.push(resolve);\n    });\n  }\n\n  /**\n   * Get current API state\n   */\n  getState(): YouTubeAPIState {\n    return { ...this.state };\n  }\n}\n\n// Singleton instance\nexport const youtubeAPI = new YouTubeAPIManager();\n\n/**\n * Format time in seconds to MM:SS or HH:MM:SS format\n */\nexport function formatTime(seconds: number): string {\n  if (isNaN(seconds) || seconds < 0) {\n    return '0:00';\n  }\n\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }\n\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n\n/**\n * Parse time string (MM:SS or HH:MM:SS) to seconds\n */\nexport function parseTime(timeString: string): number {\n  const parts = timeString.split(':').map(part => parseInt(part, 10)).filter(num => !isNaN(num));\n  \n  if (parts.length === 2) {\n    // MM:SS\n    return (parts[0] || 0) * 60 + (parts[1] || 0);\n  } else if (parts.length === 3) {\n    // HH:MM:SS\n    return (parts[0] || 0) * 3600 + (parts[1] || 0) * 60 + (parts[2] || 0);\n  }\n  \n  return 0;\n}\n\n/**\n * Create a PlayerError from YouTube API error codes\n */\nexport function createPlayerError(errorCode: number, videoId?: string): PlayerError {\n  const errorMap: Record<number, { type: ErrorType; message: string }> = {\n    2: {\n      type: ErrorType.INVALID_VIDEO_ID,\n      message: 'The video ID is invalid or contains invalid characters.',\n    },\n    5: {\n      type: ErrorType.API_ERROR,\n      message: 'The requested content cannot be played in an HTML5 player.',\n    },\n    100: {\n      type: ErrorType.VIDEO_NOT_FOUND,\n      message: 'The video was not found or has been removed.',\n    },\n    101: {\n      type: ErrorType.VIDEO_NOT_EMBEDDABLE,\n      message: 'The video owner does not allow it to be played in embedded players.',\n    },\n    150: {\n      type: ErrorType.VIDEO_NOT_EMBEDDABLE,\n      message: 'The video owner does not allow it to be played in embedded players.',\n    },\n  };\n\n  const errorInfo = errorMap[errorCode] || {\n    type: ErrorType.API_ERROR,\n    message: `Unknown YouTube API error: ${errorCode}`,\n  };\n\n  return {\n    type: errorInfo.type,\n    message: errorInfo.message,\n    ...(videoId && { videoId }),\n    originalError: errorCode,\n  };\n}\n\n/**\n * Generate a random shuffle order for playlist\n */\nexport function generateShuffleOrder(length: number, currentIndex?: number): number[] {\n  const order = Array.from({ length }, (_, i) => i);\n  \n  // Fisher-Yates shuffle\n  for (let i = order.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [order[i], order[j]] = [order[j], order[i]];\n  }\n\n  // If current index is provided, ensure it's first in the shuffle order\n  if (currentIndex !== undefined && currentIndex >= 0 && currentIndex < length) {\n    const currentPos = order.indexOf(currentIndex);\n    if (currentPos > 0) {\n      [order[0], order[currentPos]] = [order[currentPos], order[0]];\n    }\n  }\n\n  return order;\n}\n\n/**\n * Debounce function for limiting API calls\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = window.setTimeout(() => func(...args), wait);\n  };\n} ","import { StorageManager, PlayerStateData, ErrorType, PlayerError } from '../types';\n\n/**\n * LocalStorage implementation of StorageManager\n */\nexport class LocalStorageManager implements StorageManager {\n  private readonly prefix: string;\n\n  constructor(prefix = 'ytMusicPlayer') {\n    this.prefix = prefix;\n  }\n\n  /**\n   * Save data to localStorage\n   */\n  save(key: string, data: any): void {\n    try {\n      const serialized = JSON.stringify(data);\n      const fullKey = this.getFullKey(key);\n      localStorage.setItem(fullKey, serialized);\n    } catch (error) {\n      console.warn('Failed to save to localStorage:', error);\n      throw new Error(`Storage save failed: ${error}`);\n    }\n  }\n\n  /**\n   * Load data from localStorage\n   */\n  load<T>(key: string): T | null {\n    try {\n      const fullKey = this.getFullKey(key);\n      const item = localStorage.getItem(fullKey);\n      \n      if (item === null) {\n        return null;\n      }\n\n      return JSON.parse(item) as T;\n    } catch (error) {\n      console.warn('Failed to load from localStorage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Remove item from localStorage\n   */\n  remove(key: string): void {\n    try {\n      const fullKey = this.getFullKey(key);\n      localStorage.removeItem(fullKey);\n    } catch (error) {\n      console.warn('Failed to remove from localStorage:', error);\n    }\n  }\n\n  /**\n   * Clear all items with the current prefix\n   */\n  clear(): void {\n    try {\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith(this.prefix + ':')) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.warn('Failed to clear localStorage:', error);\n    }\n  }\n\n  /**\n   * Check if localStorage is available\n   */\n  isAvailable(): boolean {\n    try {\n      const testKey = '__localStorage_test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get storage usage information\n   */\n  getUsageInfo(): { used: number; available: number; percentage: number } {\n    if (!this.isAvailable()) {\n      return { used: 0, available: 0, percentage: 0 };\n    }\n\n    try {\n      // Estimate storage usage\n      let used = 0;\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          const value = localStorage.getItem(key);\n          used += key.length + (value?.length || 0);\n        }\n      }\n\n      // Most browsers have ~5-10MB localStorage limit\n      const estimated = 5 * 1024 * 1024; // 5MB\n      const percentage = (used / estimated) * 100;\n\n      return {\n        used,\n        available: estimated - used,\n        percentage: Math.min(percentage, 100),\n      };\n    } catch {\n      return { used: 0, available: 0, percentage: 0 };\n    }\n  }\n\n  /**\n   * Get full key with prefix\n   */\n  private getFullKey(key: string): string {\n    return `${this.prefix}:${key}`;\n  }\n}\n\n/**\n * Player-specific storage manager\n */\nexport class PlayerStorageManager {\n  private storage: StorageManager;\n  private readonly stateKey = 'playerState';\n\n  constructor(storage?: StorageManager, prefix = 'ytMusicPlayer') {\n    this.storage = storage || new LocalStorageManager(prefix);\n  }\n\n  /**\n   * Save complete player state\n   */\n  saveState(state: PlayerStateData): void {\n    try {\n      // Create a serializable version of the state\n      const serializableState = {\n        ...state,\n        lastUpdated: state.lastUpdated.toISOString(),\n        playlist: {\n          ...state.playlist,\n          tracks: state.playlist.tracks.map(track => ({\n            ...track,\n            addedAt: track.addedAt.toISOString(),\n          })),\n        },\n      };\n\n      this.storage.save(this.stateKey, serializableState);\n    } catch (error) {\n      console.warn('Failed to save player state:', error);\n    }\n  }\n\n  /**\n   * Load complete player state\n   */\n  loadState(): PlayerStateData | null {\n    try {\n      const state = this.storage.load<any>(this.stateKey);\n      if (!state) {\n        return null;\n      }\n\n      // Convert string dates back to Date objects\n      return {\n        ...state,\n        lastUpdated: new Date(state.lastUpdated),\n        playlist: {\n          ...state.playlist,\n          tracks: state.playlist.tracks.map((track: any) => ({\n            ...track,\n            addedAt: new Date(track.addedAt),\n          })),\n        },\n      };\n    } catch (error) {\n      console.warn('Failed to load player state:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Save only playlist data\n   */\n  savePlaylist(playlist: PlayerStateData['playlist']): void {\n    try {\n      const state = this.loadState();\n      if (state) {\n        state.playlist = playlist;\n        state.lastUpdated = new Date();\n        this.saveState(state);\n      }\n    } catch (error) {\n      console.warn('Failed to save playlist:', error);\n    }\n  }\n\n  /**\n   * Save only current playback position\n   */\n  saveCurrentTime(currentTime: number): void {\n    try {\n      const state = this.loadState();\n      if (state) {\n        state.currentTime = currentTime;\n        state.lastUpdated = new Date();\n        this.saveState(state);\n      }\n    } catch (error) {\n      console.warn('Failed to save current time:', error);\n    }\n  }\n\n  /**\n   * Save only player settings\n   */\n  saveSettings(settings: PlayerStateData['settings']): void {\n    try {\n      const state = this.loadState();\n      if (state) {\n        state.settings = settings;\n        state.lastUpdated = new Date();\n        this.saveState(state);\n      }\n    } catch (error) {\n      console.warn('Failed to save settings:', error);\n    }\n  }\n\n  /**\n   * Clear all stored data\n   */\n  clearState(): void {\n    try {\n      this.storage.remove(this.stateKey);\n    } catch (error) {\n      console.warn('Failed to clear player state:', error);\n    }\n  }\n\n  /**\n   * Check if storage is available\n   */\n  isStorageAvailable(): boolean {\n    if (this.storage instanceof LocalStorageManager) {\n      return this.storage.isAvailable();\n    }\n    return true; // Assume other storage implementations are available\n  }\n\n  /**\n   * Migrate data from old format to new format\n   */\n  migrateData(oldKey = 'ytMusicPlayer'): boolean {\n    try {\n      const oldData = localStorage.getItem(oldKey);\n      if (!oldData) {\n        return false;\n      }\n\n      const parsed = JSON.parse(oldData);\n      \n      // Convert old format to new format if needed\n      if (parsed && typeof parsed === 'object') {\n        // This is where you'd handle migration logic\n        // For now, we'll assume the format is compatible\n        this.storage.save(this.stateKey, parsed);\n        localStorage.removeItem(oldKey);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.warn('Failed to migrate data:', error);\n      return false;\n    }\n  }\n}\n\n// Default export\nexport const defaultStorage = new PlayerStorageManager(); ","import {\n  YTPlayer,\n  PlayerState,\n  RepeatMode,\n  Track,\n  Playlist,\n  PlayerSettings,\n  PlayerStateData,\n  PlayerEventType,\n  EventHandler,\n  PlayerConfig,\n  VideoInfo,\n  PlayerError,\n  ErrorType,\n  YouTubePlayerOptions,\n} from '../types';\nimport { \n  extractVideoId, \n  youtubeAPI, \n  getThumbnailUrl, \n  formatTime,\n  createPlayerError,\n  generateShuffleOrder,\n  debounce\n} from '../utils/youtube';\nimport { PlayerStorageManager, defaultStorage } from '../utils/storage';\n\n/**\n * Main YouTube Music Player class\n */\nexport class YouTubeMusicPlayer {\n  private player: YTPlayer | null = null;\n  private playlist: Playlist = {\n    tracks: [],\n    currentIndex: 0,\n    shuffled: false,\n  };\n  private settings: PlayerSettings = {\n    volume: 80,\n    repeatMode: RepeatMode.ALL,\n    shuffled: false,\n    autoplay: false,\n  };\n  private currentTime = 0;\n  private isReady = false;\n  private containerId: string;\n  private storage: PlayerStorageManager;\n  private eventListeners: Map<PlayerEventType, EventHandler[]> = new Map();\n  \n  // Debounced functions\n  private debouncedSaveState: () => void;\n  private debouncedTimeUpdate: () => void;\n\n  constructor(config: PlayerConfig) {\n    this.containerId = config.containerId;\n    this.storage = config.saveState !== false ? defaultStorage : new PlayerStorageManager();\n    \n    // Apply config\n    if (config.volume !== undefined) this.settings.volume = config.volume;\n    if (config.repeat !== undefined) this.settings.repeatMode = config.repeat;\n    if (config.shuffle !== undefined) this.settings.shuffled = config.shuffle;\n    if (config.autoplay !== undefined) this.settings.autoplay = config.autoplay;\n\n    // Setup debounced functions\n    this.debouncedSaveState = debounce(() => this.saveCurrentState(), 1000);\n    this.debouncedTimeUpdate = debounce(() => this.debouncedSaveState(), 2000);\n\n    // Initialize\n    this.initialize();\n  }\n\n  /**\n   * Initialize the player\n   */\n  private async initialize(): Promise<void> {\n    try {\n      // Load stored state\n      this.loadStoredState();\n\n      // Wait for YouTube API\n      await youtubeAPI.waitForReady();\n\n      // Create player container if it doesn't exist\n      this.ensureContainer();\n\n      // Create YouTube player\n      this.createPlayer();\n\n      this.emit('ready', { player: this });\n    } catch (error) {\n      this.handleError({\n        type: ErrorType.API_ERROR,\n        message: 'Failed to initialize player',\n        originalError: error,\n      });\n    }\n  }\n\n  /**\n   * Ensure player container exists\n   */\n  private ensureContainer(): void {\n    let container = document.getElementById(this.containerId);\n    if (!container) {\n      container = document.createElement('div');\n      container.id = this.containerId;\n      container.style.cssText = 'width: 0; height: 0; overflow: hidden; position: absolute;';\n      document.body.appendChild(container);\n    }\n  }\n\n  /**\n   * Create YouTube player instance\n   */\n  private createPlayer(): void {\n    const playerOptions: YouTubePlayerOptions = {\n      height: 0,\n      width: 0,\n      playerVars: {\n        autoplay: 0,\n        controls: 0,\n        disablekb: 1,\n        enablejsapi: 1,\n        iv_load_policy: 3,\n        modestbranding: 1,\n        playsinline: 1,\n        rel: 0,\n        origin: window.location.origin, // Fix for localhost CORS issues\n      },\n      events: {\n        onReady: (event) => this.handlePlayerReady(event),\n        onStateChange: (event) => this.handlePlayerStateChange(event),\n        onError: (event) => this.handlePlayerError(event),\n      },\n    };\n\n    this.player = new window.YT.Player(this.containerId, playerOptions);\n  }\n\n  /**\n   * Handle player ready event\n   */\n  private handlePlayerReady(event: any): void {\n    this.isReady = true;\n    this.player?.setVolume(this.settings.volume);\n\n    // Start monitoring time updates\n    this.startTimeMonitoring();\n\n    // Load current track if available\n    if (this.playlist.tracks.length > 0) {\n      this.loadCurrentTrack();\n    }\n\n    this.emit('ready', { player: this });\n  }\n\n  /**\n   * Handle player state changes\n   */\n  private handlePlayerStateChange(event: any): void {\n    const state = event.data;\n    \n    this.emit('stateChange', { \n      state, \n      isPlaying: state === PlayerState.PLAYING,\n      isPaused: state === PlayerState.PAUSED,\n      isEnded: state === PlayerState.ENDED,\n    });\n\n    // Handle track end\n    if (state === PlayerState.ENDED) {\n      this.handleTrackEnded();\n    }\n\n    // Save state when playing starts\n    if (state === PlayerState.PLAYING) {\n      this.debouncedSaveState();\n    }\n  }\n\n  /**\n   * Handle YouTube API errors\n   */\n  private handlePlayerError(event: any): void {\n    const errorCode = event.data;\n    const currentTrack = this.getCurrentTrack();\n    const error = createPlayerError(errorCode, currentTrack?.id);\n    \n    this.handleError(error);\n\n    // Try to skip to next track on certain errors\n    if ([100, 101, 150].includes(errorCode) && this.playlist.tracks.length > 1) {\n      this.next();\n    }\n  }\n\n  /**\n   * Handle track ended\n   */\n  private handleTrackEnded(): void {\n    if (this.settings.repeatMode === RepeatMode.ONE) {\n      // Repeat current track\n      this.seekTo(0);\n      this.play();\n    } else {\n      // Move to next track\n      this.next();\n    }\n  }\n\n  /**\n   * Start time monitoring\n   */\n  private startTimeMonitoring(): void {\n    const updateTime = () => {\n      if (this.player && this.isReady) {\n        this.currentTime = this.player.getCurrentTime();\n        this.handleTimeUpdate();\n      }\n      requestAnimationFrame(updateTime);\n    };\n    updateTime();\n  }\n\n  /**\n   * Handle time updates\n   */\n  private handleTimeUpdate(): void {\n    this.emit('timeUpdate', {\n      currentTime: this.currentTime,\n      duration: this.getDuration(),\n      progress: this.getProgress(),\n    });\n    \n    // Save position occasionally (debounced)\n    this.debouncedTimeUpdate();\n  }\n\n  /**\n   * Add a track to the playlist\n   */\n  async addTrack(url: string, title?: string): Promise<Track | null> {\n    const validation = extractVideoId(url);\n    if (!validation.isValid || !validation.videoId) {\n      this.handleError({\n        type: ErrorType.INVALID_VIDEO_ID,\n        message: 'Invalid YouTube URL',\n      });\n      return null;\n    }\n\n    const track: Track = {\n      id: validation.videoId,\n      title: title || `Video ${validation.videoId}`,\n      duration: 0, // Will be updated when video loads\n      thumbnail: getThumbnailUrl(validation.videoId),\n      url,\n      addedAt: new Date(),\n    };\n\n    this.playlist.tracks.push(track);\n    \n    // If this is the first track, load it\n    if (this.playlist.tracks.length === 1) {\n      this.playlist.currentIndex = 0;\n      this.loadCurrentTrack();\n    }\n\n    this.emit('playlistChange', { \n      playlist: this.playlist,\n      action: 'add',\n      track,\n    });\n\n    this.debouncedSaveState();\n    return track;\n  }\n\n  /**\n   * Remove track from playlist\n   */\n  removeTrack(index: number): boolean {\n    if (index < 0 || index >= this.playlist.tracks.length) {\n      return false;\n    }\n\n    const removedTrack = this.playlist.tracks[index];\n    this.playlist.tracks.splice(index, 1);\n\n    // Adjust current index\n    if (index < this.playlist.currentIndex) {\n      this.playlist.currentIndex--;\n    } else if (index === this.playlist.currentIndex) {\n      // Current track was removed\n      if (this.playlist.tracks.length === 0) {\n        this.playlist.currentIndex = 0;\n        this.stop();\n      } else {\n        // Load next track (or previous if at end)\n        if (this.playlist.currentIndex >= this.playlist.tracks.length) {\n          this.playlist.currentIndex = 0;\n        }\n        this.loadCurrentTrack();\n      }\n    }\n\n    this.emit('playlistChange', { \n      playlist: this.playlist,\n      action: 'remove',\n      track: removedTrack,\n      index,\n    });\n\n    this.debouncedSaveState();\n    return true;\n  }\n\n  /**\n   * Load current track into player\n   */\n  private loadCurrentTrack(): void {\n    const track = this.getCurrentTrack();\n    if (!track || !this.player || !this.isReady) {\n      return;\n    }\n\n    this.player.loadVideoById(track.id, this.currentTime);\n    \n    this.emit('trackChange', {\n      track,\n      index: this.playlist.currentIndex,\n      playlist: this.playlist,\n    });\n  }\n\n  /**\n   * Play current track\n   */\n  play(): void {\n    if (this.player && this.isReady) {\n      this.player.playVideo();\n    }\n  }\n\n  /**\n   * Pause current track\n   */\n  pause(): void {\n    if (this.player && this.isReady) {\n      this.player.pauseVideo();\n    }\n  }\n\n  /**\n   * Stop playback\n   */\n  stop(): void {\n    if (this.player && this.isReady) {\n      this.player.stopVideo();\n      this.currentTime = 0;\n    }\n  }\n\n  /**\n   * Toggle play/pause\n   */\n  togglePlay(): void {\n    if (!this.player || !this.isReady) return;\n\n    const state = this.player.getPlayerState();\n    if (state === PlayerState.PLAYING) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  /**\n   * Go to next track\n   */\n  next(): void {\n    if (this.playlist.tracks.length === 0) return;\n\n    let nextIndex: number;\n\n    if (this.settings.shuffled && this.playlist.shuffleOrder) {\n      // Find current position in shuffle order\n      const currentShufflePos = this.playlist.shuffleOrder.indexOf(this.playlist.currentIndex);\n      const nextShufflePos = (currentShufflePos + 1) % this.playlist.shuffleOrder.length;\n      nextIndex = this.playlist.shuffleOrder[nextShufflePos];\n    } else {\n      nextIndex = (this.playlist.currentIndex + 1) % this.playlist.tracks.length;\n    }\n\n    this.jumpToTrack(nextIndex);\n  }\n\n  /**\n   * Go to previous track\n   */\n  previous(): void {\n    if (this.playlist.tracks.length === 0) return;\n\n    let prevIndex: number;\n\n    if (this.settings.shuffled && this.playlist.shuffleOrder) {\n      // Find current position in shuffle order\n      const currentShufflePos = this.playlist.shuffleOrder.indexOf(this.playlist.currentIndex);\n      const prevShufflePos = currentShufflePos === 0 \n        ? this.playlist.shuffleOrder.length - 1 \n        : currentShufflePos - 1;\n      prevIndex = this.playlist.shuffleOrder[prevShufflePos];\n    } else {\n      prevIndex = this.playlist.currentIndex === 0 \n        ? this.playlist.tracks.length - 1 \n        : this.playlist.currentIndex - 1;\n    }\n\n    this.jumpToTrack(prevIndex);\n  }\n\n  /**\n   * Jump to specific track\n   */\n  jumpToTrack(index: number): void {\n    if (index < 0 || index >= this.playlist.tracks.length) return;\n\n    this.playlist.currentIndex = index;\n    this.currentTime = 0;\n    this.loadCurrentTrack();\n    \n    if (this.settings.autoplay) {\n      this.play();\n    }\n  }\n\n  /**\n   * Seek to position in current track\n   */\n  seekTo(seconds: number): void {\n    if (this.player && this.isReady) {\n      this.player.seekTo(seconds);\n      this.currentTime = seconds;\n    }\n  }\n\n  /**\n   * Set volume (0-100)\n   */\n  setVolume(volume: number): void {\n    volume = Math.max(0, Math.min(100, volume));\n    this.settings.volume = volume;\n    \n    if (this.player && this.isReady) {\n      this.player.setVolume(volume);\n    }\n\n    this.emit('volumeChange', { volume });\n    this.debouncedSaveState();\n  }\n\n  /**\n   * Mute/unmute\n   */\n  toggleMute(): void {\n    if (!this.player || !this.isReady) return;\n\n    if (this.player.isMuted()) {\n      this.player.unMute();\n    } else {\n      this.player.mute();\n    }\n  }\n\n  /**\n   * Toggle shuffle mode\n   */\n  toggleShuffle(): void {\n    this.settings.shuffled = !this.settings.shuffled;\n    \n    if (this.settings.shuffled) {\n      this.playlist.shuffleOrder = generateShuffleOrder(\n        this.playlist.tracks.length,\n        this.playlist.currentIndex\n      );\n    } else {\n      this.playlist.shuffleOrder = undefined;\n    }\n\n    this.emit('settingsChange', { settings: this.settings });\n    this.debouncedSaveState();\n  }\n\n  /**\n   * Cycle through repeat modes\n   */\n  toggleRepeat(): void {\n    const modes = [RepeatMode.NONE, RepeatMode.ALL, RepeatMode.ONE];\n    const currentIndex = modes.indexOf(this.settings.repeatMode);\n    const nextIndex = (currentIndex + 1) % modes.length;\n    \n    this.settings.repeatMode = modes[nextIndex];\n    \n    this.emit('settingsChange', { settings: this.settings });\n    this.debouncedSaveState();\n  }\n\n  /**\n   * Clear playlist\n   */\n  clearPlaylist(): void {\n    this.playlist.tracks = [];\n    this.playlist.currentIndex = 0;\n    this.playlist.shuffleOrder = undefined;\n    this.stop();\n\n    this.emit('playlistChange', { \n      playlist: this.playlist,\n      action: 'clear',\n    });\n\n    this.debouncedSaveState();\n  }\n\n  // Getters\n  getCurrentTrack(): Track | null {\n    return this.playlist.tracks[this.playlist.currentIndex] || null;\n  }\n\n  getPlaylist(): Playlist {\n    return { ...this.playlist };\n  }\n\n  getSettings(): PlayerSettings {\n    return { ...this.settings };\n  }\n\n  getCurrentTime(): number {\n    return this.currentTime;\n  }\n\n  getDuration(): number {\n    return this.player?.getDuration() || 0;\n  }\n\n  getProgress(): number {\n    const duration = this.getDuration();\n    return duration > 0 ? (this.currentTime / duration) * 100 : 0;\n  }\n\n  getVolume(): number {\n    return this.settings.volume;\n  }\n\n  isPlaying(): boolean {\n    return this.player?.getPlayerState() === PlayerState.PLAYING;\n  }\n\n  isPaused(): boolean {\n    return this.player?.getPlayerState() === PlayerState.PAUSED;\n  }\n\n  isMuted(): boolean {\n    return this.player?.isMuted() || false;\n  }\n\n  // Event handling\n  on(event: PlayerEventType, handler: EventHandler): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)?.push(handler);\n  }\n\n  off(event: PlayerEventType, handler: EventHandler): void {\n    const handlers = this.eventListeners.get(event);\n    if (handlers) {\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: PlayerEventType, data: any): void {\n    const handlers = this.eventListeners.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.warn('Event handler error:', error);\n        }\n      });\n    }\n  }\n\n  private handleError(error: PlayerError): void {\n    console.error('Player error:', error);\n    this.emit('error', error);\n  }\n\n  // State persistence\n  private saveCurrentState(): void {\n    if (!this.storage) return;\n\n    const state: PlayerStateData = {\n      playlist: this.playlist,\n      currentTime: this.currentTime,\n      settings: this.settings,\n      lastUpdated: new Date(),\n    };\n\n    this.storage.saveState(state);\n  }\n\n  private loadStoredState(): void {\n    if (!this.storage) return;\n\n    const state = this.storage.loadState();\n    if (state) {\n      this.playlist = state.playlist;\n      this.currentTime = state.currentTime;\n      this.settings = state.settings;\n    }\n  }\n\n  /**\n   * Destroy player and clean up\n   */\n  destroy(): void {\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n    \n    this.eventListeners.clear();\n    this.isReady = false;\n  }\n} "],"names":["PlayerState","RepeatMode","ErrorType","extractVideoId","url","patterns","cleanUrl","trim","pattern","match","isValid","videoId","error","getThumbnailUrl","quality","default","medium","high","standard","maxres","youtubeAPI","constructor","this","state","loaded","loading","loadPromise","callbacks","loadAPI","Promise","resolve","reject","window","YT","Player","originalCallback","onYouTubeIframeAPIReady","forEach","callback","script","document","createElement","src","onerror","Error","firstScript","getElementsByTagName","parentNode","insertBefore","head","appendChild","setTimeout","isReady","waitForReady","push","getState","debounce","func","wait","timeout","args","clearTimeout","LocalStorageManager","prefix","save","key","data","serialized","JSON","stringify","fullKey","getFullKey","localStorage","setItem","console","warn","load","item","getItem","parse","remove","removeItem","clear","keysToRemove","i","length","startsWith","isAvailable","testKey","getUsageInfo","used","available","percentage","value","estimated","Math","min","PlayerStorageManager","storage","stateKey","saveState","serializableState","lastUpdated","toISOString","playlist","tracks","map","track","addedAt","loadState","Date","savePlaylist","saveCurrentTime","currentTime","saveSettings","settings","clearState","isStorageAvailable","migrateData","oldKey","oldData","parsed","defaultStorage","YouTubeMusicPlayer","config","player","currentIndex","shuffled","volume","repeatMode","ALL","autoplay","eventListeners","Map","containerId","repeat","shuffle","debouncedSaveState","saveCurrentState","debouncedTimeUpdate","initialize","loadStoredState","ensureContainer","createPlayer","emit","handleError","type","API_ERROR","message","originalError","container","getElementById","id","style","cssText","body","playerOptions","height","width","playerVars","controls","disablekb","enablejsapi","iv_load_policy","modestbranding","playsinline","rel","origin","location","events","onReady","event","handlePlayerReady","onStateChange","handlePlayerStateChange","onError","handlePlayerError","_a","setVolume","startTimeMonitoring","loadCurrentTrack","isPlaying","PLAYING","isPaused","PAUSED","isEnded","ENDED","handleTrackEnded","errorCode","currentTrack","getCurrentTrack","errorInfo","INVALID_VIDEO_ID","VIDEO_NOT_FOUND","VIDEO_NOT_EMBEDDABLE","createPlayerError","includes","next","ONE","seekTo","play","updateTime","getCurrentTime","handleTimeUpdate","requestAnimationFrame","duration","getDuration","progress","getProgress","addTrack","title","validation","thumbnail","action","removeTrack","index","removedTrack","splice","stop","loadVideoById","playVideo","pause","pauseVideo","stopVideo","togglePlay","getPlayerState","nextIndex","shuffleOrder","nextShufflePos","indexOf","jumpToTrack","previous","prevIndex","currentShufflePos","prevShufflePos","seconds","max","toggleMute","isMuted","unMute","mute","toggleShuffle","order","Array","from","_","j","floor","random","currentPos","generateShuffleOrder","toggleRepeat","modes","NONE","clearPlaylist","getPlaylist","getSettings","getVolume","on","handler","has","set","get","off","handlers","destroy","isNaN","hours","minutes","secs","toString","padStart","timeString","parts","split","part","parseInt","filter","num"],"mappings":"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"}